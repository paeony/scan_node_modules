var fs = require('fs');
var path = require('path');

function walk(filepath, cb)
{
  var ls = fs.readdirSync(filepath);
  for (i in ls) {
    var f = ls[i];
    var fstat = fs.statSync(filepath + "/" + f);
    if (fstat.isFile()) {
      cb(filepath + "/" + f);
    }
    else if (fstat.isDirectory()) {
      walk(filepath + "/" + f, cb);
    }
  } 
}

var stats = {};
var dependencies = {};
walk('.', function(filepath) {
  if (path.basename(filepath) == "package.json") {
    var packageJson = JSON.parse(fs.readFileSync(filepath));
    var deps = packageJson.dependencies;
    if (deps) {
      for (dep in deps) {
        dep = dep.replace(/['"]+/g, '');
        var version = deps[dep];
        if (!(dep in dependencies)) {
          dependencies[dep] = {};
        }
        if (!(version in dependencies[dep])) {
          dependencies[dep][version] = [];
        }
        dependencies[dep][version].push(filepath);
      }

    }
  } else {
    var loc = stats;
    var parts = filepath.split(path.sep);
    parts.pop();
    for (i in parts) {
      var _dir = parts[i];
      if (!(_dir in loc)) {
        loc[_dir] = { _count:1 }
      } else {
        loc[_dir]._count++;
      }
      loc = loc[_dir]; 
    }
  }
});

var max_depth = 2;
function print(o, depth)
{
  if (depth > max_depth)
    return;

  var inset = '';
  for (var i = 0; i < depth; i++)
    inset += '.';

  for (k in o) {
    if (k != "_count") {
      console.log(inset + k + " - " + o[k]._count);
      print(o[k], depth + 1);
    }
  }
}

console.log("done");
print(stats, 0);
console.log(dependencies);
